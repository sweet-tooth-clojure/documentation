#+TITLE: Framework Design

Writing a framework is a foolish endeavor that can be made a little less foolish
by clarifying what makes a good framework. If you're going to spend an
inordinate amount of time toiling away in front of a monitor for no tangible
benefit then you might as well try to do a good job of it.

So far I haven't found a guide to good framework design (or even a good
explanation of what a framework /is/!), so here's my attempt to fill that void.
A framework framework, if you will. I hope you find it useful. I hope even more
that you've found something more useful and can point me to it. (If that sounds
like a cry for help, that's because it is!)

(This guide is adapted from [[http://flyingmachinestudios.com/programming/why-programmers-need-frameworks/][Frameworks and Why (Clojure) Programmers Need Them]].)

* What is a Framework?

A framework is a set of libraries that:

- Manages the complexity of coordinating the /resources/ needed to write an
  application...
- by providing /abstractions/ for those resources...
- and /systems for communicating/ between those resources...
- within an /environment/...
- so that programmers can /focus on writing the business logic/ that's specific
  to their product

I'll elaborate on each of these points using examples from [[https://rubyonrails.org/][Rails]] and from the
ultimate framework: the /operating system/.

You might wonder, how is an OS a framework? When you look at the list of
framework responsibilities, you'll notice that the OS handles all of them, and
it handles them exceedingly well. Briefly: an OS provides virtual abstractions
for hardware resources so that programmers don't have to focus on the details
of, say, pushing bytes onto some particular disk or managing CPU scheduling. It
also provides the conventions of a hierarchical filesystem with an addressing
system consisting of names separated by forward slashes, and these conventions
provide one way for resources to communicate with each other (Process A can
write to ~/foo/bar~ while Process B reads from it) - if every programmer came up
with her own bespoke addressing system, it would be a disaster. The OS handles
this for us so we can focus on application-specific tasks.

Because operating systems are such successful frameworks we'll look at a few of
their features in some detail so that we can get a better understanding of what
good framework design looks like.

** Coordinating Resources

/Resources/ are the "materials" used by programs to do their work, and can be
divided into four categories: storage, computation, communication, and
interfaces. Examples of storage include files, databases, and caches.
Computation examples include processes, threads, actors, background jobs, and
core.async processes. For communication there are HTTP requests, message queues,
and event buses. Interfaces typically include keyboard and mouse, plus screens
and the systems used to display stuff on them: gui toolkits, browsers and the
DOM, etc.

.the four resource categories
image::resource-categories.jpg[resource categories]

Specialized resources are built on top of more general-purpose resources. (Some
refer to these specialized resources as /services/ or /components/.) We start
with hardware and build virtual resources on top. With storage, the OS starts
with disks and memory and creates the filesystem as a virtual storage resource
on top. Databases like Postgres use the filesystem to create another virtual
storage resource to handle use cases not met by the filesystem. Datomic uses
other databases like Cassandra or DynamoDB as its storage layer. Browsers create
their own virtual environments and introduce new resources like local storage
and cookies.

For computation, the OS introduces processes and threads as virtual resources
representing and organizing program execution. Erlang creates an environment
with a process model that's dramatically different from the underlying OS's.
Same deal with Clojure's ~core.async~, which introduces the /communicating
sequential processes/ computation model. It's a virtual model defined by Clojure
macros, "compiled" to core clojure, then compiled to JVM bytecode (or
JavaScript!), which then has to be executed by operating system processes.

Interfaces follow the same pattern: on the visual display side, the OS paints to
monitors, applications paint to their own virtual canvas, browsers are
applications which introduce their own resources (the DOM and ~<canvas>~), and
React introduces a virtual DOM. Emacs is an operating system on top of the
operating system, and it provides windows and frames.

Resources /manage/ their own /entities/: in a database, entities could include
tables, rows, triggers, and sequences. Filesystem entities include directories
and files. A GUI manages windows, menu bars, and other components. To manage a
resource is to create, validate, secure, and dispose of resource entities.

(I realize that this description of /resource/ is not the kind of airtight,
axiomatic, comprehensive description that programmers like. One shortcoming is
that the boundary between resource and application is pretty thin: Postgres is
an application in its own right, but from the perspective of a Rails app it's a
resource. Still, hopefully my use of /resource/ is clear enough that you
nevertheless understand what the f I'm talking about when I talk about
resources.)

/Coordinating/ these resources is inherently complex. Hell, coordinating anything
is complex. I still remember the first time I got smacked in the face with a
baseball in little league thanks to a lack of coordination. There was also a
time period where I, as a child, took tae kwon do classes and frequently ended
up sitting with my back against the wall with my eyes closed in pain because a)
my mom for some reason refused to buy me an athletic cup and b) I did not
possess the coordination to otherwise protect myself during sparring.

When building a product, you have to decide how to create, validate, secure, and
dispose of resource entities; how to convey entities from one resource to
another; and how to deal with issues like timing (race conditions) and failure
handling that arise whenever resources interact, all without getting hit in the
face. Rails, for instance, was designed to coordinate browsers, HTTP servers,
and databases. It had to convey user input to a database, and also retrieve and
render database records for display by the user interface, via HTTP requests and
responses.

There is no obvious or objectively correct way to coordinate these resources. In
Rails, HTTP requests would get dispatched to a Controller, which was responsible
for interacting with a database and making data available to a View, which would
render HTML that could be sent back to the browser.

You don't /have/ to coordinate web app resources using the Model/View/Controller
(MVC) approach Rails uses, but you do have to coordinate these resources
/somehow/. These decisions involve making tradeoffs and imposing constraints to
achieve a balance of extensibility (creating a system generic enough for new
resources to participate) and power (allowing the system to fully exploit the
unique features of a specific resource).

This is a very difficult task even for experienced developers, and the choices
you make could have negative repercussions that aren't apparent until you're
heavily invested in them. With Rails, for instance, ActiveRecord (AR) provided a
good generic abstraction for databases, but early on it was very easy to produce
extremely inefficient SQL, and sometimes very difficult to produce efficient
SQL. You'd often have to hand-write SQL, eliminating some of the benefits of
using AR in the first place.

For complete beginners, the task of making these tradeoffs is impossible because
doing so requires experience. Beginners won't even know that it's necessary to
make these decisions. At the same time, more experienced developers would prefer
to spend their time and energy solving more important problems.

Frameworks make these decisions for us, allowing us to focus on business logic.
The /manage/ resources by by introducing /communication systems/ and
/abstractions/.

** Resource Management

Let's decompose "resource management" to better understand what exactly
frameworks are responsible for. To start, it's useful to break down resource
management into the /component level/ and the /entity level/. At the component
level, we talk about:

- Starting and stopping a database
- Starting, stopping, pausing, and resuming a job scheduler
- Starting and stopping an HTTP server

In general, component management is about start, stopping, and sometimes pausing
and resuming a sub-system which itself manages entities. For operating systems,
we have tools like systemd and upstart to handle this. In Clojure apps, we have
[[https://github.com/weavejester/integrant][Integrant]], [[https://github.com/tolitius/mount][mount]], and [[https://github.com/stuartsierra/component][component]].

At the entity level, resource management involves task like:

- create / read / update / delete a database record
- add / pause / remove a background job
- create / wait for / respond to XHR request

Stepping back, we might say that resource management is about changing state and
responding to state changes. (You can even think of components themselves as
entities of the larger system; is starting and stopping a database fundamentally
different from managing background jobs?)

"State" is one of those very overloaded programming terms, so like, don't kill
me if I use it differently than you. But when talking about state, I think it's
important to differentiate between /operational state/ and /content/.

Content examples include:

- The screenplay you're writing
- The source of the framework you're building for some reason
- HTTP headers and body

We perform CRUD operations to change content.

Operational state, on the other hand, is metadata relevant to state change
operations. (Note to self: this definition may need work?) Examples include:

- Whether form input is valid or invalid
- Whether a file is writeable or read-only
- Whether an operation succeeded or failed

This distinction has been helpful for me because it's helped me be more rigorous
in creating good user experiences. A lot of creating a good user experience is
about providing feedback to the user. But what is feedback? Feedback is
information about the operational state of resource entities, and frameworks
help us manage that.

So anyway, we have to manage resources somehow. But how? That's where
abstractions come in.

** Resource Abstractions

Our software interacts with resources via their /abstractions/. I think of
abstractions as:

- the data structures used to represent a resource
- the set of messages for changing retrieving state
- the set of possible operational states
- the mechanisms for responding to operational state changes

(/Abstraction/ might be a terrible word to use here. Every developer over three
years old has their own definition, and if mine doesn't correspond to yours just
cut me a little slack and run with it :)

Rails exposes a database resource that your application code interacts with via
the ~ActiveRecord~ abstraction. Tables correspond to classes, and rows to
objects of that class. This a choice with tradeoffs - rows could have been
represented as Ruby hashes (a primitive akin to a JSON object), which might have
made them more portable while making it more difficult to concisely express
database operations like ~save~ and ~destroy~. The abstraction also responds to
~find~, ~create~, ~update~, and ~destroy~. You respond to operational state
changes via lifecycle callback methods like ~before/validation~. Frameworks add
value by identifying these state transitions and providing interfaces for them
when they're absent from the underlying resource.

You already know this, but it bears saying: abstractions let us code at a higher
level. Framework abstractions handle the concerns that are specific to resource
management, letting us focus on building products. Designed well, they enable
loose coupling.

Nothing exemplifies this better than the massively successful /file/ abstraction
that the UNIX framework introduced. We're going to look at in detail because it
embodies design wisdom that can help us understand what makes a good framework.

The core file functions are ~open~, ~read~, ~write~, and ~close~. Files are
represented as sequential streams of bytes, which is just as much a choice as
ActiveRecord's choice to use Ruby objects. Within processes, open files are
represented as /file descriptors/, which are usually a small integer. The ~open~
function takes a path and returns a file descriptor, and ~read~, ~write~, and
~close~ take a file descriptor as an argument to do their work.

Now here's the amazing magical kicker: /file/ doesn't have to mean /file on
disk/. Just as Rails implements the ActiveRecord abstraction for MySQL and
Postgres, the OS implements the file abstraction for *pipes*, terminals, and
other resources, meaning that your programs can write to them using the same
system calls as you'd use to write files to disk - indeed, from your program's
standpoint, all it knows is that it's writing to a file; it doesn't know that
the "file" that a file descriptor refers to might actually be a pipe.

NOTE: Exercise for the reader: write a couple paragraphs explaining precisely
the design choices that enable this degree of loose coupling. How can these
choices help us in evaluating and designing frameworks?

This design is a huge part of UNIX's famed simplicity. It's what lets us run
this in a shell:

#+BEGIN_SRC bash
# list files in the current directory and perform a word count on the output
ls | wc
#+END_SRC

The shell interprets this by launching an ~ls~ process. Normally, when a process
is launched it creates three file descriptors (which, remember, represent open
files): ~0~ for ~STDIN~, ~1~ for ~STDOUT~, and ~2~ for ~STDERR~, and the shell
sets each file descriptor to refer to your terminal (terminals can be files!!
what!?!?). Your shell sees the pipe, ~|~, and sets ~ls~'s ~STDOUT~ to the pipe's
~STDIN~, and the pipe's ~STDOUT~ to ~wc~'s ~STDIN~. The pipe links processes'
file descriptors, while the processes get to read and write "files" without
having to know what's actually on the other end. No joke, every time I think of
this I get a little excited tingle at the base of my spine because I am a:

=+++=
<iframe width="560" height="315" src="https://www.youtube.com/embed/IRsPheErBj8"
frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture" allowfullscreen></iframe>
=+++=

This is why file I/O is referred to as /the universal I/O model/. I'll have more
to say about this in the next section, but I share it here to illustrate how
much more powerful your programming environment can be if you find the right
abstractions. The file I/O model still dominates decades after its introduction,
making our lives easier /without our even having to understand how it actually
works/.

The canonical first exercise any beginner programmer performs is to write a
program that prints out, /What up, y'all?/. This program makes use of the file
model, but the beginner doesn't have to even know that such a thing exists. This
is what a good framework does. A well-designed framework lets you easily get
started building simple applications, without preventing you building more
complicated and useful ones as you learn more.

One final point about abstractions: they define mechanisms for calling your
application's code. We saw this a bit earlier with ActiveRecord's lifecycle
methods. Frameworks will usually provide the overall structure for how an
application should interact with its environment, defining sets of events that
you write custom handlers for. With ActiveRecord lifecycles, the structure of
~before/create~, ~create~, ~after/create~ is predetermined, but you can define
what happens at each step. This pattern is called /inversion of control/, and
many developers consider it a key feature of frameworks.

With *nix operating systems, you could say that in C programs the ~main~
function is a kind of ~onStart~ callback. The OS calls ~main~, and ~main~ tells
the OS what instructions should be run. However, the OS controls when
instructions are actually executed because the OS is in charge of scheduling.
It's a kind of inversion of control, right? 🤔

** Communication

Frameworks coordinate resources, and (it's almost a tautology to say this)
coordination requires /communication/. Communication is /hard/. Frameworks make
it easier by translating the disparate "languages" spoken by resources into one
or more common languages that are easy to understand and efficient, while also
ensuring extensibility and composability. Frameworks also do some of the work of
ensuring resilience. This usually entails:

- Establishing naming and addressing conventions
- Establishing conventions for how to structure content
- Introducing communication brokers
- Handling communication failures (the database is down! that file
  doesn't exist!)

One example many people are familiar with is the HTTP stack, a "language" used
to communicate between browser and server resources:

- HTTP structures content (request headers and request body as text)
- TCP handles communication failures
- IP handles addressing

*** Conventions

The file model is a "common language", and the OS uses device drivers to
translate between between the file model and whatever local language is spoken
by hardware devices. It has naming and addressing conventions, letting you
specify files on the filesystem using character strings separated by slashes
that it translates to an internal inode (a data structure that stores file and
directory details, like ownership and permissions). We're so used to this that
it's easy to forget it's a convention; *nix systems could have been designed so
that you had to refer to files using a number or a UUID. The file descriptors I
described in the last section are also a convention.

Another convention the file model introduces is to structure content as byte
streams, as opposed to bit streams, character streams, or xml documents.
However, bytes are usually too low-level, so the OS includes a suite of command
line tools that introduce the further convention of structuring bytes by
interpreting them as characters (~sed~, ~awk~, ~grep~, and friends). More
recently, more tools have been introduced that interpret text as YAML or JSON.
The Clojure world has further tools to interpret JSON as transit. My YAML tools
can't do jack with your JSON files, but because these formats are all expressed
in terms of lower-level formats, the lower-level tools can still work with them.
Structure affects composability.

The file model's simplicity is what allows it to be the "universal I/O model." I
mean, just imagine if all Linux processes had to communicate with XML instead of
byte streams! Hoo boy, what a crazy world that would be. Having a simple,
universal communication system makes it extremely easy for new resources to
participate without having to be directly aware of each other. It allows us to
easily compose command line tools. It allows one program to write to a log while
another reads from it. In other words, it enables loose coupling and all the
attendant benefits.

*** Communication Brokers

/Globally addressable communication brokers/ (like the filesystem, or Kafka
queues, or databases) are essential to enabling composable systems. /Global/
means that every resource can access it. /Addressable/ means that the broker
maintains identifiers for entities independently of its clients, and it's
possible for clients to specify entities using those identifiers. /Communication
broker/ means that the system's purpose is to convey data from one resource to
another, and it has well-defined semantics: a queue has FIFO semantics, the file
system has update-in-place semantics, etc.

If Linux had no filesystem and processes were only allowed to communicate via
pipes, it would be a nightmare. Indirect communication is more flexible than
direct communication. It supports decoupling over time, in that reads and writes
don't have to happen synchronously. It also allows participants to drop in and
out of the communication system independently of each other. (By the way, I
can't think of the name for this concept or some better way to express it, and
would love feedback here.)

I think this is the trickiest part of framework design. At the beginning of the
article I mentioned that developers might end up hacking around a framework's
constraints, and I think the main constraint is often the absence of a
communication broker. The framework's designers introduce new resources and
abstractions, but the only way to compose them is through direct communication,
and sometimes that direct communication is handled magically. (I seem to recall
that Rails worked with this way, with tight coupling between Controller and
Views and a lack of options for conveying Controller data to other parts of the
system). If someone wants to introduce new abstractions, they have to untangle
all the magic and hook deep into the framework's internals, using -- or even
patching! -- code that's meant to be private.

I remember running into this with Rails back when MongoDB was released; the
/document database/ resource was sufficiently different from the /relational
database resource/ that it was pretty much impossible for MongoDB to take part
in the ActiveRecord abstraction, and it was also very difficult to introduce a
new data store abstraction that would play well with the rest of the Rails
ecosystem.

For a more current example, a frontend framework might identify the form as a
resource, and create a nice abstraction for it that handles things like
validation and the submission lifecycle. If the form abstraction is written in a
framework that has no communication broker (like a global state container), then
it will be very difficult to meet the common use case of using a form to filter
rows in a table because there's no way for the code that renders table data to
access the form inputs' values. You might come up with some hack like defining
handlers for exporting the form's state, but doing this on an ad-hoc basis
results in confusing and brittle code.

By contrast, the presence of a communication broker can make life much easier.
In the Clojure world, the React frameworks [[https://github.com/Day8/re-frame/][re-frame]] and [[https://github.com/omcljs/om][om.next]] have embraced
global state atoms, a kind of communication broker similar to the filesystem
(atoms are an in-memory storage mechanism). They also both have well defined
communication protocols. I'm not very familiar with [[https://redux.js.org/][Redux]] but I've heard tell
that it also has embraced a global, central state container.

If you create a form abstraction using re-frame, it's possible to track its
state in a global state atom. It's further possible to establish a naming
convention for forms, making it easier for other participants to look up the
form's data and react to it. (Sweet Tooth does this.)

Communication systems are fundamental. Without them, it's difficult to build
anything but the simplest applications. By providing communication systems,
frameworks relieve much of the cognitive burden of building a program. By
establishing communication standards, frameworks make it possible for developers
to create composable tools, tools that benefit everybody who uses that
framework. Standards make infrastructure possible, and infrastructure enables
productivity.

In this section I focused primarily on the file model because it's been so
successful and I think we can learn a lot from it. Other models include event
buses and message queues. I'm not going to write about these because I'm not
made of words, ok?!?

** Environments

Frameworks are built to coordinate resources within a particular /environment/.
When we talk about desktop apps, web apps, single page apps, and mobile apps,
we're talking about different environments. From the developer's perspective,
environments are distinguished by the resources that are available, while from
the user's perspective different environments entail different usage patterns
and expectations about distribution, availability, licensing, and payment.

As technology advances, new resources become available (the Internet! databases!
smart phones! powerful browsers! AWS!), new environments evolve to combine those
resources, and frameworks are created to target those environments. This is why
we talk about mobile frameworks and desktop frameworks and the like.

One of the reasons I stopped using Rails was because it was a /web application
framework/, but I wanted to build /single page applications/. At the time
(around 2012?), I was learning to use Angular and wanted to deploy applications
that used it, but it didn't really fit with Rails's design.

And that's OK. Some people write programs for Linux, some people write for
macOS, some people still write for Windows for some reason (just kidding! don't
kill me!). A framework is a tool, and tools are built for a specific purpose. If
you're trying to achieve a purpose the tool isn't built for, use a different
tool.
** Additional Responsibilities

While the core purpose of frameworks is to manage resources, they also handle
secondary responsibilities, including:

- Code generation
- Build tooling

Code generation reduces the amount of effort it takes to introduce the artifacts
(files, text) required to add new instances of a framework abstraction (like a
Model in a Rails app). This effort takes two forms: the mechanical effort of
typing, and the mental effort of remembering what the code is supposed to look
like.

Build tooling is helpful in fulfilling an application framework's purpose of
empowering you to create, well, applications. It reduces the effort required to
produce a working application.

Frameworks might take on additional responsibilities, but I think I've covered
the most important ones here. Now that we have a better idea of what a framework
/is/, we can start exploring what makes a framework /good/. We can see a hint in
the previous two paragraphs: frameworks reduce effort. They make our jobs
/easier/.

* What is good framework design?

If we take a step back and look at all the a framework is responsible for, we
can see that frameworks make development /easier/. /Easier/ simply means that
less effort is involved: mental effort to understand your system (what we call
/struggling/), mechanical effort typing (what we call /tedium/), repeated effort
implementing solutions to the same problem over and over (what we call
/consulting/). A well-designed framework is one that makes development easier,
both in the short term and in the long term.

[NOTE]
======

I think the whole simple vs. easy discussion in the Clojure world has been
effective at conveying the value of simple constructs, but at the cost of making
it almost, like, gauche to advocate for the importance of making work easier for
developers. I think this has ultimately been detrimental to the Clojure
community.

This comes in part from defining easy as "near at hand", which is not how anyone
actually uses the word. Easy and difficult describe the amount of effort
involved. So it's been weird to see "easy" disparaged, because that's what the
programming game is all about! It's about reducing effort.

The simple vs. easy discussion has it all backwards: Simplicity's value is that
it makes development easier. Would anyone advocate for simple code if it made
programming harder? Also, it is just one factor of many to consider when writing
software. Imagine writing the simplest code in the universe, and then running it
through a minifier: it's still simple, but now it's significantly more difficult
to understand.

It seemed to me like the framing of SvE was meant mostly to caution against
optimizing for short-term effort at the expense of increasing long-term effort,
which I think is helpful. But it also seemed like it was meant to chastise
people for trying to reduce effort in any fashion, and I think that was
detrimental. Specifically, the idea of building web sites in a day was derided
as "a stupid thing to be important."

But it's not stupid. It's helpful to make things easy. It's helpful to do the
work of identifying where the people who use tools might struggle, and to reduce
the amount of struggling necessary.

======

How do we accomplish this? First, by writing code to meets the responsibilities
listed in the last section. But just writing some code isn't enough: it needs to
be easy to use and understand.

Figuring out and articulating my thoughts on this
subject is definitely an ongoing process, but here's what I have so far: A
well-designed framework is /modular/, /extensible/, and /composable/.

** Modular

/Modular/ means that the framework's responsibilities should be well-defined,
and it should be possible for you to swap out one implementation of a
responsibility for another. For example, Sweet Tooth uses reitit for routing,
but it's possible for you to use a different library as long as you can adapt it
to the routing protocol.

At the same time, some core responsibilities cannot be made modular. Sweet Tooth
is built on top of Integrant, which is used to define, configure, and manage the
lifecycle of the system's architecture; you can't use the mount or component
libraries instead On the frontend, ST is built on top of re-frame, which act as
a kind of filesystem and messaging system. Using Sweet Tooth means using
re-frame and Integrant.

** Extensible

/Extensibile/ means that devs should be able to easily introduce custom
implementations of core framework offerings. (OMG I need to find a better way to
phrase this!) In practice this mostly means identifying where it's possible and
appropriate to use a multimethod, and doing so. One example is Sweet Tooth's
form component system: ST takes care of all the details for storing a form
input's data on the frontend and submiting that data to the backend. It's
trivial to extend the system for new components, for example by introducing a
markdown editor component. The to-do example walkthrough will show you how this
works.

** Composable

/Composable/ means two things: first, that the framework should be written from
a UNIX-y "do one thing well" standpoint. Back to form components: the form
component system is layered, with re-frame subscriptions and handlers as the
bottom layer. A multimethod composes those subscriptions and handlers into DOM
options like `:on-change` and `:checked` as appropriate for the different kinds
of inputs. You can use this system for composing the re-frame subscriptions and
handlers, or you could introduce your own.

The second meaning is that it should be possible to write framework plugins. For
example, you should be able to write an auth plugin that spans the frontend and
backend, introducing API endpoints and reagent components that Just Work. I
haven't put much thought into supporting this kind of compsability.


* A Clojure Framework

Frameworks are all about managing the complexity of coordinating resources.
Well, guess what: Managing Complexity is Clojure's middle name. Clojure
"Managing Complexity" McCarthy-Lisp. Personally, I want a single-page app (SPA)
framework, and there are many aspects of Clojure's design and philosophy that I
think will make it possible to create one that seriously kicks ass. I'll give
just a few examples.

First, consider how Linux tools like ~sed~ and ~awk~ are text-oriented.
Developers can add additional structure to text by formatting it as JSON or
YAML, and those text-processing tools can still work the structured text.

In the same way, Clojure's emphasis on simple data structures means that we can
create specialized structures to represent forms and ajax request, and tools to
process those structures. If we define those structures in terms of maps and
vectors, though, we'll still be able to use a vast ecosystem of functions for
working with those simpler structures. In other words, creating specialized
structures does not preclude us from using the tools built for simpler
structures, and this isn't the case for many other languages.

Second, Clojure's abstraction mechanisms (protocols and multimethods) are
extremely flexible, making it easy for us to implement abstractions for new
resources as they become available.

Third, /you can use the same language for the frontend and backend!!!/ Not only
that, Transit allows the two to effortlessly communicate. This eliminates an
entire class of coordination problems that frameworks in other languages have to
contend with.

In my opinion, the Clojurian stance that frameworks are more trouble than
they're worth is completely backwards: Clojure gives us the foundation to build
a completely kick-ass framework! One that's simple /and/ easy. One can dream,
right?

My ambition in building a SPA framework is to empower current and future Clojure
devs to get our ideas into production /fast/. I want us to be able to spend more
time on the hard stuff, the fun stuff, the interesting stuff. And I want us to
be able to easily ship with confidence.

The framework I'm building is built on top of some truly amazing libraries,
primarily Integrant, re-frame, and Liberator. Integrant introduces a /component/
abstraction and handles the start/stop lifecycle of an application. re-frame
provides a filesystem and communication broker for the frontend. Liberator
introduces a standard model for handling HTTP requests.

If my framework is useful at all it's because the creators of those tools have
done all the heavy lifting. My framework introduces more resources and
abstractions specific to creating single-page apps. For example, it creates an
abstraction for wrapping AJAX requests so that you can easily display activity
indicators when a request is active. It creates a form abstraction that handles
all the plumbing of handling input changes and dispatching form submission, as
well the entire form lifecycle of /fresh/, /dirty/, /submitted/, /invalid/,
/succeeded/, etc. It imposes some conventions for organizing data.

If you'd like to see a production app that uses the framework, however, I invite
you to check out [Grateful Place](https://gratefulplace.com), a community site
for people who want to support each other in growing resilience, peace, and joy
by practicing compassion, gratitude, generosity, and other positive values.

Other Clojure frameworks include:

- [Luminus](http://www.luminusweb.net)
- [Fulcro](http://book.fulcrologic.com/) which probably does everything I want
  my framework to, only better
- [re-frame](https://github.com/Day8/re-frame/) remains my favorite frontend
  framework
- [duct](https://github.com/duct-framework/duct) is great but its docs aren't
  that great yet
- [Coast on Clojure](https://github.com/coast-framework/coast), a full stack web
  framework

(Sorry if I neglected your Clojure tool!)

Thanks to the following people who read drafts of this article and helped me
develop it:

- Mark Bastian
- [Dmitri Sotnikov aka @yogthos](https://twitter.com/yogthos)
- Joe Jackson
- Sergey Shvets
- Kenneth Kalmer
- Sean whose last name I don't know
- Tom Brooke
- Patrick whose last name I don't know (update: It's Patrick French!)
- Fed Reggiardo
- Vincent Raerek
- Ernesto de Feria
- Bobby Towers
- Chris Oakman
- The TriClojure meetup
